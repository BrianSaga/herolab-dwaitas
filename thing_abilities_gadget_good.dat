<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- This file contains the assortment of special abilities for the game system.
      Abilities confer their effects through scripts that apply the necessary changes
      to the appropriate traits.

      Abilities influence traits, so all adjustments must be applied prior to when the
      final trait value is calculated. The script timing used below (PreTraits/5000)
      ensures that we satisfy this requirement. All abilities should be designated as
      "unique" so that they can only be selected a single time by the user.
-->

<document signature="Hero Lab Data">

  <!-- Delete Gadget Trait -->
  <thing
    id="abDelete"
    name="Delete"
    compset="Ability"
    isunique="yes"
    description="Description goes here">

    <!-- If checkbox selection is needed, make sure the compset includes "UserSelect"
          component and define this field appropriately.
    <fieldval field="usrChkText" value="Menu1"/>
    -->

    <!-- If thing-based menu selection is needed, make sure the compset includes
          "UserSelect" component and define these fields and tags as appropriate.
    <fieldval field="usrLabel1" value="Menu1"/>
    <fieldval field="usrCandid1" value="component.Attribute"/>
    <fieldval field="usrLabel2" value="Menu2"/>
    <fieldval field="usrCandid2" value="component.Skill"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="ChooseSrc2" tag="Thing"/>
    -->

    <!-- If array-based menu selection is needed, make sure the compset includes
          "UserSelect" component and define these fields as appropriate.
    <fieldval field="usrLabelAr" value="Menu1"/>
    <arrayval field="usrArray" index="0" value="Choice #1"/>
    <arrayval field="usrArray" index="1" value="Choice #2"/>
    <arrayval field="usrArray" index="2" value="Choice #3"/>
    -->

    <!-- If the ability can only be selected at character creation, assign this tag
    <tag group="User" tag="CreateOnly"/>
    -->

    <!-- If the ability should not appear for normal selection, assign this tag
    <tag group="Hide" tag="Ability"/>
    -->

    <!-- If the ability can be activated by the user to apply its effects, assign this tag
    <tag group="User" tag="Activation"/>
    -->

    <!-- Assign tags to mark trait type -->
    <tag group="Trait" tag="Major"/>
    <tag group="Trait" tag="Good"/>
    <tag group="Trait" tag="Gadget"/>
	
	<!-- For sorting -->
	<tag group="TraitTab" tag="Gadget"/>
    
    <!-- Define any script needed to apply changes to other traits
    <eval value="1" phase="PreTraits" priority="5000">
      <before name="Calc trtFinal"/><![CDATA[
      ~if we haven't been activated, just get out (only needed for user-activated abilities)
      doneif (field[abilActive].value = 0)

      ~apply whatever adjustment(s) are needed here
      ~#traitbonus[trDefense] += 1
      ]]></eval>
    -->

    <!-- Define any appropriate pre-requisites for the ability
    <exprreq iserror="yes" message="Strength 5 required."><![CDATA[#trait[attrStr] >= 5]]></exprreq>
    -->

    </thing>

  <!-- Forcefield Gadget Trait -->
  <thing
    id="abForce"
    name="Forcefield"
    compset="Ability"
    isunique="yes"
    description="Description goes here">

    <!-- If checkbox selection is needed, make sure the compset includes "UserSelect"
          component and define this field appropriately.
    <fieldval field="usrChkText" value="Menu1"/>
    -->

    <!-- If thing-based menu selection is needed, make sure the compset includes
          "UserSelect" component and define these fields and tags as appropriate.
    <fieldval field="usrLabel1" value="Menu1"/>
    <fieldval field="usrCandid1" value="component.Attribute"/>
    <fieldval field="usrLabel2" value="Menu2"/>
    <fieldval field="usrCandid2" value="component.Skill"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="ChooseSrc2" tag="Thing"/>
    -->

    <!-- If array-based menu selection is needed, make sure the compset includes
          "UserSelect" component and define these fields as appropriate.-->
    <fieldval field="usrLabelAr" value="type:"/>
    <arrayval field="usrArray" index="0" value="Minor"/>
    <arrayval field="usrArray" index="1" value="Major"/>
    

    <!-- If the ability can only be selected at character creation, assign this tag
    <tag group="User" tag="CreateOnly"/>
    -->

    <!-- If the ability should not appear for normal selection, assign this tag
    <tag group="Hide" tag="Ability"/>
    -->

    <!-- If the ability can be activated by the user to apply its effects, assign this tag
    <tag group="User" tag="Activation"/>
    -->

    <!-- Assign tags to mark trait type -->
    <tag group="Trait" tag="Minor"/>
    <tag group="Trait" tag="Good"/>
    <tag group="Trait" tag="Gadget"/>
	
	<!-- For sorting -->
	<tag group="TraitTab" tag="Gadget"/>	
    
	<!-- Add a domain 
	<tag group="User" tag="NeedDomain"/>
	-->
    
	<!-- Change our tags on this trait based on menu selection -->
    <eval value="1" phase="Setup" priority="4000"><![CDATA[
		~only do this at creation
		doneif (state.iscreate = 0)
		
		if (compare(field[usrSelect].text,field[usrArray].arraytext[0]) = 0) then
			~remove the special tag
			perform delete[Trait.Major]
			
			~assign the minor tag
			perform assign[Trait.Minor]
			
		elseif (compare(field[usrSelect].text,field[usrArray].arraytext[1]) = 0) then
			~remove the default tag
			perform delete[Trait.Minor]
			
			~assign the major tag and any non-standard cost tags
			perform assign[Trait.Major]
			
		endif
		
	]]></eval>
	

    <!-- Define any appropriate pre-requisites for the ability
    <exprreq iserror="yes" message="Strength 5 required."><![CDATA[#trait[attrStr] >= 5]]></exprreq>
    -->

    </thing>

  <!-- One Shot Gadget Trait -->
  <thing
    id="abOneShot"
    name="One Shot"
    compset="Ability"
    isunique="yes"
    description="Description goes here">

    <!-- If checkbox selection is needed, make sure the compset includes "UserSelect"
          component and define this field appropriately.
    <fieldval field="usrChkText" value="Menu1"/>
    -->

    <!-- If thing-based menu selection is needed, make sure the compset includes
          "UserSelect" component and define these fields and tags as appropriate.
    <fieldval field="usrLabel1" value="Menu1"/>
    <fieldval field="usrCandid1" value="component.Attribute"/>
    <fieldval field="usrLabel2" value="Menu2"/>
    <fieldval field="usrCandid2" value="component.Skill"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="ChooseSrc2" tag="Thing"/>
    -->

    <!-- If array-based menu selection is needed, make sure the compset includes
          "UserSelect" component and define these fields as appropriate.
    <fieldval field="usrLabelAr" value="type:"/>
    <arrayval field="usrArray" index="0" value="Minor"/>
    <arrayval field="usrArray" index="1" value="Major"/>
    -->

    <!-- If the ability can only be selected at character creation, assign this tag
    <tag group="User" tag="CreateOnly"/>
    -->

    <!-- If the ability should not appear for normal selection, assign this tag
    <tag group="Hide" tag="Ability"/>
    -->

    <!-- If the ability can be activated by the user to apply its effects, assign this tag
    <tag group="User" tag="Activation"/>
    -->

    <!-- Assign tags to mark trait type -->
    <tag group="Trait" tag="Minor"/>
    <tag group="Trait" tag="Good"/>
    <tag group="Trait" tag="Gadget"/>
	
	<!-- For sorting -->
	<tag group="TraitTab" tag="Gadget"/>	
    
	<!-- Add a domain 
	<tag group="User" tag="NeedDomain"/>
	-->
    
	<!-- Change our tags on this trait based on menu selection 
    <eval value="1" phase="Setup" priority="4000"><![CDATA[
		~only do this at creation
		doneif (state.iscreate = 0)
		
		if (compare(field[usrSelect].text,field[usrArray].arraytext[0]) = 0) then
			~remove the special tag
			perform delete[Trait.Major]
			
			~assign the minor tag
			perform assign[Trait.Minor]
			
		elseif (compare(field[usrSelect].text,field[usrArray].arraytext[1]) = 0) then
			~remove the default tag
			perform delete[Trait.Minor]
			
			~assign the major tag and any non-standard cost tags
			perform assign[Trait.Major]
			
		endif
		
	]]></eval>
	-->

    <!-- Define any appropriate pre-requisites for the ability
    <exprreq iserror="yes" message="Strength 5 required."><![CDATA[#trait[attrStr] >= 5]]></exprreq>
    -->

    </thing>

  <!-- Open/Close Gadget Trait -->
  <thing
    id="abOpenClos"
    name="Open/Close"
    compset="Ability"
    isunique="yes"
    description="Description goes here">

    <!-- If checkbox selection is needed, make sure the compset includes "UserSelect"
          component and define this field appropriately.
    <fieldval field="usrChkText" value="Menu1"/>
    -->

    <!-- If thing-based menu selection is needed, make sure the compset includes
          "UserSelect" component and define these fields and tags as appropriate.
    <fieldval field="usrLabel1" value="Menu1"/>
    <fieldval field="usrCandid1" value="component.Attribute"/>
    <fieldval field="usrLabel2" value="Menu2"/>
    <fieldval field="usrCandid2" value="component.Skill"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="ChooseSrc2" tag="Thing"/>
    -->

    <!-- If array-based menu selection is needed, make sure the compset includes
          "UserSelect" component and define these fields as appropriate.
    <fieldval field="usrLabelAr" value="type:"/>
    <arrayval field="usrArray" index="0" value="Minor"/>
    <arrayval field="usrArray" index="1" value="Major"/>
    -->

    <!-- If the ability can only be selected at character creation, assign this tag
    <tag group="User" tag="CreateOnly"/>
    -->

    <!-- If the ability should not appear for normal selection, assign this tag
    <tag group="Hide" tag="Ability"/>
    -->

    <!-- If the ability can be activated by the user to apply its effects, assign this tag
    <tag group="User" tag="Activation"/>
    -->

    <!-- Assign tags to mark trait type -->
    <tag group="Trait" tag="Minor"/>
    <tag group="Trait" tag="Good"/>
    <tag group="Trait" tag="Gadget"/>
	
	<!-- For sorting -->
	<tag group="TraitTab" tag="Gadget"/>	
    
	<!-- Add a domain 
	<tag group="User" tag="NeedDomain"/>
	-->
    
	<!-- Change our tags on this trait based on menu selection 
    <eval value="1" phase="Setup" priority="4000"><![CDATA[
		~only do this at creation
		doneif (state.iscreate = 0)
		
		if (compare(field[usrSelect].text,field[usrArray].arraytext[0]) = 0) then
			~remove the special tag
			perform delete[Trait.Major]
			
			~assign the minor tag
			perform assign[Trait.Minor]
			
		elseif (compare(field[usrSelect].text,field[usrArray].arraytext[1]) = 0) then
			~remove the default tag
			perform delete[Trait.Minor]
			
			~assign the major tag and any non-standard cost tags
			perform assign[Trait.Major]
			
		endif
		
	]]></eval>
	-->

    <!-- Define any appropriate pre-requisites for the ability
    <exprreq iserror="yes" message="Strength 5 required."><![CDATA[#trait[attrStr] >= 5]]></exprreq>
    -->

    </thing>

  <!-- Restriction Gadget Trait -->
  <thing
    id="abRestrict"
    name="Restriction"
    compset="Ability"
    isunique="no"
    description="Description goes here">

    <!-- If checkbox selection is needed, make sure the compset includes "UserSelect"
          component and define this field appropriately.
    <fieldval field="usrChkText" value="Menu1"/>
    -->

    <!-- If thing-based menu selection is needed, make sure the compset includes
          "UserSelect" component and define these fields and tags as appropriate.
    <fieldval field="usrLabel1" value="Menu1"/>
    <fieldval field="usrCandid1" value="component.Attribute"/>
    <fieldval field="usrLabel2" value="Menu2"/>
    <fieldval field="usrCandid2" value="component.Skill"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="ChooseSrc2" tag="Thing"/>
    -->

    <!-- If array-based menu selection is needed, make sure the compset includes
          "UserSelect" component and define these fields as appropriate.
    <fieldval field="usrLabelAr" value="type:"/>
    <arrayval field="usrArray" index="0" value="Minor"/>
    <arrayval field="usrArray" index="1" value="Major"/>
    -->

    <!-- If the ability can only be selected at character creation, assign this tag
    <tag group="User" tag="CreateOnly"/>
    -->

    <!-- If the ability should not appear for normal selection, assign this tag
    <tag group="Hide" tag="Ability"/>
    -->

    <!-- If the ability can be activated by the user to apply its effects, assign this tag
    <tag group="User" tag="Activation"/>
    -->

    <!-- Assign tags to mark trait type -->
    <tag group="Trait" tag="Minor"/>
    <tag group="Trait" tag="Bad"/>
    <tag group="Trait" tag="Gadget"/>
	
	<!-- For sorting -->
	<tag group="TraitTab" tag="Gadget"/>	
    
	<!-- Add a domain -->
	<tag group="User" tag="NeedDomain"/>
	
    
	<!-- Change our tags on this trait based on menu selection 
    <eval value="1" phase="Setup" priority="4000"><![CDATA[
		~only do this at creation
		doneif (state.iscreate = 0)
		
		if (compare(field[usrSelect].text,field[usrArray].arraytext[0]) = 0) then
			~remove the special tag
			perform delete[Trait.Major]
			
			~assign the minor tag
			perform assign[Trait.Minor]
			
		elseif (compare(field[usrSelect].text,field[usrArray].arraytext[1]) = 0) then
			~remove the default tag
			perform delete[Trait.Minor]
			
			~assign the major tag and any non-standard cost tags
			perform assign[Trait.Major]
			
		endif
		
	]]></eval>
	-->

    <!-- Define any appropriate pre-requisites for the ability
    <exprreq iserror="yes" message="Strength 5 required."><![CDATA[#trait[attrStr] >= 5]]></exprreq>
    -->

    </thing>

  <!-- Scan Gadget Trait -->
  <thing
    id="abScan"
    name="Scan"
    compset="Ability"
    isunique="no"
    description="Description goes here">

    <!-- If checkbox selection is needed, make sure the compset includes "UserSelect"
          component and define this field appropriately.
    <fieldval field="usrChkText" value="Menu1"/>
    -->

    <!-- If thing-based menu selection is needed, make sure the compset includes
          "UserSelect" component and define these fields and tags as appropriate.
    <fieldval field="usrLabel1" value="Menu1"/>
    <fieldval field="usrCandid1" value="component.Attribute"/>
    <fieldval field="usrLabel2" value="Menu2"/>
    <fieldval field="usrCandid2" value="component.Skill"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="ChooseSrc2" tag="Thing"/>
    -->

    <!-- If array-based menu selection is needed, make sure the compset includes
          "UserSelect" component and define these fields as appropriate.-->
    <fieldval field="usrLabelAr" value="type:"/>
    <arrayval field="usrArray" index="0" value="general"/>
    <arrayval field="usrArray" index="1" value="specific"/>
    

    <!-- If the ability can only be selected at character creation, assign this tag
    <tag group="User" tag="CreateOnly"/>
    -->

    <!-- If the ability should not appear for normal selection, assign this tag
    <tag group="Hide" tag="Ability"/>
    -->

    <!-- If the ability can be activated by the user to apply its effects, assign this tag
    <tag group="User" tag="Activation"/>
    -->

    <!-- Assign tags to mark trait type -->
    <tag group="Trait" tag="Minor"/>
    <tag group="Trait" tag="Good"/>
    <tag group="Trait" tag="Gadget"/>
	
	<!-- For sorting -->
	<tag group="TraitTab" tag="Gadget"/>	
    
	<!-- Add a domain 
	<tag group="User" tag="NeedDomain"/>
	-->
    
	<!-- Change our tags on this trait based on menu selection -->
    <eval value="1" phase="Setup" priority="4000"><![CDATA[
		~only do this at creation
		doneif (state.iscreate = 0)
		
		if (compare(field[usrSelect].text,field[usrArray].arraytext[0]) = 0) then
			~remove the domain
			trustme
			field[domDomain].text = ""
			perform delete[User.NeedDomain]
			
		elseif (compare(field[usrSelect].text,field[usrArray].arraytext[1]) = 0) then
			~apply the domain
			perform assign[User.NeedDomain]
			
		endif
		
	]]></eval>
	

    <!-- Define any appropriate pre-requisites for the ability
    <exprreq iserror="yes" message="Strength 5 required."><![CDATA[#trait[attrStr] >= 5]]></exprreq>
    -->

    </thing>
  
  <!-- Transmit Gadget Trait -->
  <thing
    id="abTransmit"
    name="Transmit"
    compset="Ability"
    isunique="yes"
    description="Description goes here">

    <!-- If checkbox selection is needed, make sure the compset includes "UserSelect"
          component and define this field appropriately.
    <fieldval field="usrChkText" value="Menu1"/>
    -->

    <!-- If thing-based menu selection is needed, make sure the compset includes
          "UserSelect" component and define these fields and tags as appropriate.
    <fieldval field="usrLabel1" value="Menu1"/>
    <fieldval field="usrCandid1" value="component.Attribute"/>
    <fieldval field="usrLabel2" value="Menu2"/>
    <fieldval field="usrCandid2" value="component.Skill"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="ChooseSrc2" tag="Thing"/>
    -->

    <!-- If array-based menu selection is needed, make sure the compset includes
          "UserSelect" component and define these fields as appropriate.
    <fieldval field="usrLabelAr" value="type:"/>
    <arrayval field="usrArray" index="0" value="general"/>
    <arrayval field="usrArray" index="1" value="specific"/>
    -->

    <!-- If the ability can only be selected at character creation, assign this tag
    <tag group="User" tag="CreateOnly"/>
    -->

    <!-- If the ability should not appear for normal selection, assign this tag
    <tag group="Hide" tag="Ability"/>
    -->

    <!-- If the ability can be activated by the user to apply its effects, assign this tag
    <tag group="User" tag="Activation"/>
    -->

    <!-- Assign tags to mark trait type -->
    <tag group="Trait" tag="Minor"/>
    <tag group="Trait" tag="Good"/>
    <tag group="Trait" tag="Gadget"/>
	
	<!-- For sorting -->
	<tag group="TraitTab" tag="Gadget"/>	
    
	<!-- Add a domain 
	<tag group="User" tag="NeedDomain"/>
	-->
    
	<!-- Change our tags on this trait based on menu selection -->
    <eval value="1" phase="Setup" priority="4000"><![CDATA[
		~only do this at creation
		doneif (state.iscreate = 0)
		
		if (compare(field[usrSelect].text,field[usrArray].arraytext[0]) = 0) then
			~remove the domain
			trustme
			field[domDomain].text = ""
			perform delete[User.NeedDomain]
			
		elseif (compare(field[usrSelect].text,field[usrArray].arraytext[1]) = 0) then
			~apply the domain
			perform assign[User.NeedDomain]
			
		endif
		
	]]></eval>
	

    <!-- Define any appropriate pre-requisites for the ability
    <exprreq iserror="yes" message="Strength 5 required."><![CDATA[#trait[attrStr] >= 5]]></exprreq>
    -->

    </thing>

  <!-- Teleport Gadget Trait -->
  <thing
    id="abTeleport"
    name="Teleport"
    compset="Ability"
    isunique="yes"
    description="Description goes here">

    <!-- If checkbox selection is needed, make sure the compset includes "UserSelect"
          component and define this field appropriately.
    <fieldval field="usrChkText" value="Menu1"/>
    -->

    <!-- If thing-based menu selection is needed, make sure the compset includes
          "UserSelect" component and define these fields and tags as appropriate.
    <fieldval field="usrLabel1" value="Menu1"/>
    <fieldval field="usrCandid1" value="component.Attribute"/>
    <fieldval field="usrLabel2" value="Menu2"/>
    <fieldval field="usrCandid2" value="component.Skill"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="ChooseSrc2" tag="Thing"/>
    -->

    <!-- If array-based menu selection is needed, make sure the compset includes
          "UserSelect" component and define these fields as appropriate.
    <fieldval field="usrLabelAr" value="type:"/>
    <arrayval field="usrArray" index="0" value="general"/>
    <arrayval field="usrArray" index="1" value="specific"/>
    -->

    <!-- If the ability can only be selected at character creation, assign this tag
    <tag group="User" tag="CreateOnly"/>
    -->

    <!-- If the ability should not appear for normal selection, assign this tag
    <tag group="Hide" tag="Ability"/>
    -->

    <!-- If the ability can be activated by the user to apply its effects, assign this tag
    <tag group="User" tag="Activation"/>
    -->

    <!-- Assign tags to mark trait type -->
    <tag group="Trait" tag="Minor"/>
    <tag group="Trait" tag="Good"/>
    <tag group="Trait" tag="Gadget"/>
	
	<!-- For sorting -->
	<tag group="TraitTab" tag="Gadget"/>	
    
	<!-- Add a domain 
	<tag group="User" tag="NeedDomain"/>
	-->
    
	<!-- Change our tags on this trait based on menu selection -->
    <eval value="1" phase="Setup" priority="4000"><![CDATA[
		~only do this at creation
		doneif (state.iscreate = 0)
		
		if (compare(field[usrSelect].text,field[usrArray].arraytext[0]) = 0) then
			~remove the domain
			trustme
			field[domDomain].text = ""
			perform delete[User.NeedDomain]
			
		elseif (compare(field[usrSelect].text,field[usrArray].arraytext[1]) = 0) then
			~apply the domain
			perform assign[User.NeedDomain]
			
		endif
		
	]]></eval>
	

    <!-- Define any appropriate pre-requisites for the ability
    <exprreq iserror="yes" message="Strength 5 required."><![CDATA[#trait[attrStr] >= 5]]></exprreq>
    -->

    </thing>

  <!-- Weld Gadget Trait -->
  <thing
    id="abWeld"
    name="Weld"
    compset="Ability"
    isunique="yes"
    description="Description goes here">

    <!-- If checkbox selection is needed, make sure the compset includes "UserSelect"
          component and define this field appropriately.
    <fieldval field="usrChkText" value="Menu1"/>
    -->

    <!-- If thing-based menu selection is needed, make sure the compset includes
          "UserSelect" component and define these fields and tags as appropriate.
    <fieldval field="usrLabel1" value="Menu1"/>
    <fieldval field="usrCandid1" value="component.Attribute"/>
    <fieldval field="usrLabel2" value="Menu2"/>
    <fieldval field="usrCandid2" value="component.Skill"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="ChooseSrc2" tag="Thing"/>
    -->

    <!-- If array-based menu selection is needed, make sure the compset includes
          "UserSelect" component and define these fields as appropriate.
    <fieldval field="usrLabelAr" value="type:"/>
    <arrayval field="usrArray" index="0" value="general"/>
    <arrayval field="usrArray" index="1" value="specific"/>
    -->

    <!-- If the ability can only be selected at character creation, assign this tag
    <tag group="User" tag="CreateOnly"/>
    -->

    <!-- If the ability should not appear for normal selection, assign this tag
    <tag group="Hide" tag="Ability"/>
    -->

    <!-- If the ability can be activated by the user to apply its effects, assign this tag
    <tag group="User" tag="Activation"/>
    -->

    <!-- Assign tags to mark trait type -->
    <tag group="Trait" tag="Minor"/>
    <tag group="Trait" tag="Good"/>
    <tag group="Trait" tag="Gadget"/>
	
	<!-- For sorting -->
	<tag group="TraitTab" tag="Gadget"/>	
    
	<!-- Add a domain 
	<tag group="User" tag="NeedDomain"/>
	-->
    
	<!-- Change our tags on this trait based on menu selection -->
    <eval value="1" phase="Setup" priority="4000"><![CDATA[
		~only do this at creation
		doneif (state.iscreate = 0)
		
		if (compare(field[usrSelect].text,field[usrArray].arraytext[0]) = 0) then
			~remove the domain
			trustme
			field[domDomain].text = ""
			perform delete[User.NeedDomain]
			
		elseif (compare(field[usrSelect].text,field[usrArray].arraytext[1]) = 0) then
			~apply the domain
			perform assign[User.NeedDomain]
			
		endif
		
	]]></eval>
	

    <!-- Define any appropriate pre-requisites for the ability
    <exprreq iserror="yes" message="Strength 5 required."><![CDATA[#trait[attrStr] >= 5]]></exprreq>
    -->

    </thing>

  </document>
